The Phenomenal gem
==================

A context oriented programming framework for Ruby

Install
--------
Type the following line in a console:

[sudo] gem install phenomenal-*.gem


Use
---
put the following line at the begining of the software in wich you want to use
the framework:

require 'phenomenal'


Unit testing
------------
Type the followings commands in a console:

cd ./test/
ruby test_all.rb

Source code
-----------

The source code can be find in lib/phenomenal/


API definition
---------------

ctxt def(symbol)
    Define a new context, referenced by ’symbol’.

ctxt forget(symbol)
    Destroy the context, the context has to be inactive.

ctxt add adaptation(context sym, class const, method sym ,umeth ) { |*args, &block| block }
    Add a new adaptation to the context, this adaptation concerns a method in a
    class and its body is either the UnboundMethod umeth or the content of the
    optional block. If umeth is used it has to be unbounded from a parent of, or,
    from the target class. (Works even if context is already active)

ctxt remove adaptation(context sym, class const, method sym)
    Remove an adaptation for a particular method from the context.
    (Works even if context is already active)

ctxt activate(symbol)
    Activate the context and its adaptations

ctxt deactivate(symbol)
    Deactivate the context and its adaptations

ctxt proceed(*args){ block }
    This method should only be called in the definition of an adaptation.
    It calls the under adaptation of the method (depending of the conflict
    resolution policy) and pass the args and block to it.

ctxt informations(symbol)
    Return the following informations about the context:
        - name
        - Time of last activation
        - Time of creation
        - Activation age
        - List of the adaptation names
        - active state

ctxt active?(symbol)
    Return true if the context is currently active, false otherwise

ctxt list
    List all defined contexts

ctxt list active
    List all active contexts

ctxt change policy { |a, b| block }
    Change the conflict resolution policy used by the Context Manager. The
    block passed must take two arguments (two adaptations to compare) and return
    1 if the adaptation ’a’ has priority on adaptation ’b’, -1 if not or raise
    an ContextError if the conflict is not solvable. Pre-implemented conflict
    policies can be found in the ConflictPolicies module
    (lib/phenomenal/utils.rb). The default policy is the no resolution policy
    where only one adaptation can be active for a particular method.

